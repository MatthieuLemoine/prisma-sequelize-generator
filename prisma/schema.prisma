generator models {
  provider     = "node ./dist/cli.js"
  outputFormat = "typescript"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  email       String   @unique
  weight      Float?
  is18        Boolean?
  name        String?  @db.VarChar(255)
  successorId Int?
  successor   User?    @relation("BlogOwnerHistory", fields: [successorId], references: [id])
  predecessor User?    @relation("BlogOwnerHistory")
  role        Role     @default(USER)
  posts       Post[]
  keywords    String[]
  biography   Json
  amount      BigInt
  uid         String  @default(uuid())
}

model Post {
  id     Int   @id @default(autoincrement())
  user   User? @relation(fields: [userId], references: [id])
  userId Int?
  number String @unique @default(dbgenerated())
  date   DateTime @default(now())
  @@map("Posts")
}

enum Role {
  USER
  ADMIN
}

model Access {
  accessId    String   @id @default(uuid())
  name        String
  description String

  accessCredential AccessCredential?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum SustainableDevelopmentGoal {
  NO_POVERTY
  ZERO_HUNGER
  GOOD_HEALTH_AND_WELL_BEING
  QUALITY_EDUCATION
  GENDER_EQUALITY
  CLEAN_WATER_AND_SANITATION
  AFFORDABLE_AND_CLEAN_ENERGY
  DECENT_WORK_AND_ECONOMIC_GROWTH
  INDUSTRY_INNOVATION_AND_INFRASTRUCTURE
  REDUCED_INEQUALITIES
  SUSTAINABLE_CITIES_AND_COMMUNITIES
  RESPONSIBLE_CONSUMPTION_AND_PRODUCTION
  CLIMATE_ACTION
  LIFE_BELOW_WATER
  LIFE_ON_LAND
  PEACE_JUSTICE_AND_STRONG_INSTITUTIONS
  PARTNERSHIPS_FOR_THE_GOALS
}


model Charity {
  charityId    String   @id @default(uuid())
  name String
  charitiesSelections CharitiesSelection[]
  sustainableDevelopmentGoals SustainableDevelopmentGoal[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CharitiesSelection {
  charitiesSelectionId  String   @id @default(uuid())
  charities Charity[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AccessCredential {
  accessCredentialId String   @id @default(uuid())

  password String
  access Access @relation(fields: [accessId], references: [accessId])
  accessId String @unique

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}