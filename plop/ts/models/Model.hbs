import { Sequelize, Model, DataTypes, ModelCtor } from 'sequelize';

export class {{modelName}} extends Model {
  static initialize(sequelize: Sequelize) {
    this.init(
      {
      {{#each scalarFields}}
        {{fieldName}}: {
          type: {{#if isList}}DataTypes.ARRAY(DataTypes.{{type}}){{else}}DataTypes.{{{type}}}{{/if}},{{#if (eq allowNull false)}}
          allowNull: {{allowNull}},{{/if}}{{#if (and hasDefaultValue (eq isAutoincrement false))}}
          defaultValue: {{#if isUuid}}DataTypes.UUIDV4{{else if isNow}}Sequelize.literal('CURRENT_TIMESTAMP'){{else}}'{{default}}'{{/if}},{{/if}}{{#if isId}}
          primaryKey: {{isId}},{{/if}}{{#if isAutoincrement}}
          autoIncrement: {{isAutoincrement}},{{/if}}{{#if isUnique}}
          unique: {{isUnique}},{{/if}}
        },
      {{/each}}
      },
      {
        sequelize,
        modelName: '{{modelName}}',
        tableName: '{{#if dbName}}{{dbName}}{{else}}{{modelName}}{{/if}}',
        timestamps: {{or (or hasCreatedAt hasUpdatedAt) hasDeletedAt}},{{#if (or (or hasCreatedAt hasUpdatedAt) hasDeletedAt)}}{{#if (eq hasCreatedAt false)}}
        createdAt: false,{{/if}}{{#if (eq hasUpdatedAt false)}}
        updatedAt: false,{{/if}}{{!-- {{#if (eq hasDeletedAt false)}}
        deletedAt: false,{{/if}} --}}{{#if hasDeletedAt}}
        paranoid: true,{{/if}}{{/if}}
      }
    );
  }

  {{#if (or belongsToFields (or hasManyFields hasOneFields))}}
  static associate(models: Record<string, ModelCtor<Model>>) {
  {{#each belongsToFields}}
    this.belongsTo(models.{{name}}, { as: '{{as}}', targetKey: '{{targetKey}}', foreignKey: '{{foreignKey}}' });
  {{/each}}
  {{#each hasManyFields}}
    this.hasMany(models.{{name}}, { as: '{{as}}', sourceKey: '{{sourceKey}}', foreignKey: '{{foreignKey}}' });
  {{/each}}
  {{#each hasOneFields}}
    this.hasOne(models.{{name}}, { as: '{{as}}' });
  {{/each}}
  }
  {{/if}}
}
